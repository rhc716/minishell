Simple Command
- Execute a simple command with an absolute path like /bin/ls or any other command without options
	=> /bin/ls
	=> /usr/bin/env
Arguments
- Execute a simple command with an absolute path like /bin/ls or any other command with arguments but without quotes and double quotes
	=> /bin/ls -al
	=> /bin/ls "-al"
- Repeat multiple times with different commands and arguments
	=> /bin/date -u
	=> /bin/date "-u"
echo
- Execute the echo command with or without arguments or options
	=> echo "hello minishell!"
	=> echo -n "hello minishell!"
- Repeat multiple times with different arguments
	=> echo "      space        parse test        "
	=> echo -n "      'single        quote test'        "
exit
- Execute exit command with or without arguments
	=> exit
	=> exit 1
- Repeat multiple times with different arguments
	=> exit sdf sdf
- Don't forget to relaunch the minishell
Return value of a process
- Execute a simple command with absolute path like /bin/ls or any other command with arguments but without quotes and double quotes then execute echo $?
- Check the printed value. You can repeat the same in bash and compare it.
- Repeat multiple times with different commands and arguments, use some failing commands like '/bin/ls filethatdoesntexist'
	=> /bin/ls
		=> echo $?
	=> /bin/ls filethatdoesntexist
		=> echo $?
Semicolons
- Execute multiple simple commands with absolute path with arguments but separate them with semicolons
	=> ls ; echo test ; date -n
- [x] Repeat multiple times with different commands and don't forget to try with or without whitespaces around the semicolons
	=> ls;echo test;date -n
	=> ls; echo test; date -n
	=> ls ;echo test ;date -n
	=> ls             ;         echo test  ;           date -n
Signals
- Try ctrl-C in an empty prompt
- Try ctrl-\ in an empty prompt
- Try ctrl-D in an empty prompt
- Try ctrl-C in a prompt after you wrote some stuff
- Try ctrl-D in a prompt after you wrote some stuff
- Try ctrl-\ in a prompt after you wrote some stuff
	=> stdin 자체가 buffered input이라 엔터를 입력하고 난 후에만 write에서 접근할 수 있는데 ctrl+\를 누르면 버퍼가 날라감.
	=> 해당 기능을 구현하려면 ioctl (man 2 ioctl) 시스템 콜로 구현해야 하는데 minishell 과제에서 해당 함수는 사용 금지되어 있음.
- Try ctrl-C after running a blocking command like cat or grep without arguments
- Try ctrl-\ after running a blocking command like cat or grep without arguments
- Try ctrl-D after running a blocking command like cat or grep without arguments
- Repeat multiple times with different commands
Double Quotes
- Execute a simple command with absolute path with arguments but this time double quotes (you should include whitespaces and semicolons in the quotes)
	=> "/bin/ls" "-al"
	=> "/bin/echo" "; ; ; ; ; ; ' ' ' ; "
- Think about empty arguments or a weird use of '\'
	=> /bin/ls ""
	=> /bin/ls "\"
		=> '\' 은 이스케이프 문자인데 이스케이프 문자는 minishell에서 구현할 필요가 없다고 함.
- Do not try multiline strings
env
- Check if env shows you the current environment variables
	=> env
	=> /usr/bin/env
export
- Export environment variables, create new ones and replace old ones
	=> export
		=> export NEW=TEST
		=> export
		=> export NEW=MOD
		=> export
		=> export NEW="quote and space test"
		=> export
- Check them with env
	=> env
		=> export NEW1=TEST1
		=> env
unset
- Export environment variables, create new ones and replace old ones
- Use unset to remove some of them
- Check the result with env
	=> export TARGET=REMOVE
		=> env
		=> unset TARGET
		=> env
Environment Variables
- Execute echo with some $ variables as arguments
	=> echo $PATH
	=> echo $HOME
	=> echo $PATH $HOME
- [x] Check if double quotes around $ variables is working correctly (like in bash)
	=> echo "$PATH"
	=> echo "$HOME"
	=> echo "$PATH" "$HOME"
cd
- Use the command cd to move the working directory and check if you are in the right directory with /bin/ls
	=> cd builtins
- Repeat multiple times with working and not working cd
	=> cd not_exist
- try '.' '..' as arguments too
	=> cd ..
		=> cd ./builtins
pwd
- Use the command pwd
	=> pwd
- [x] Repeat multiple times in multiple directories
	=> cd builtins
- [x] try '.' '..' as arguments too
	=> pwd .
	=> pwd ..
Relative Path
- Execute commands but this time use a relative path
	=> ./minishell
- Repeat multiple times in multiple directories with complex relative path (lots of ..)
	=> /bin/../bin/../bin/../bin/../bin/../bin/../bin/../bin/../bin/../bin/ls
Environment Path
- Execute commands but this time without any path. (ls, wc, awk etc...)
	=> ls
	=> date
- Unset the $PATH and check if it is not working anymore
	=> unset PATH
		=> date
- Set the $PATH to a multiple directory value (directory1:directory2) and check that directories are checked in order from left to right
	=> export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
Simple Quotes
- Execute commands with simple quotes as argument
	=> /bin/ls '-al'
	=> '/bin/ls' -al
	=> 'ls' -al
	=> 'ls' '-al'
- Try empty arguments
	=> 'ls' ''
- Try environment variables, whitespaces and semicolons in the simple quotes
	=> echo '$PATH'
	=> echo '; ; ; ; ; ; " " " " ; '
Redirection
- Execute commands with redirections < and/or >
	=> ls > ls.txt
	=> ls > a ;  cat < a > b ; cat b
- Repeat multiple times with different commands and arguments and sometimes change > with >>
	=> echo "1" >> add
		=> echo "2" >> add
		=> echo "3" >> add
		=> cat add
- [x] Check if multiple of the same redirections fail
	=> ls > a > b  > c
		=> cat a
		=> cat b
		=> cat c
Pipes
- Execute commands with pipes like 'cat file | grep bla | more'
	=> ls -al | grep d | sort | tail -2
- Repeat multiple times with different commands and arguments
	=> ls -al | xxd | tail -2 | cat
- Try some failing commands like 'ls filethatdoesntexist | grep bla | more'
	=> ls filethatdoesntexist | grep d | sort | tail -2
- Try to mix pipes and redirections.
	=> ls -al > a ; cat < a |  grep d | tail -2
Go Crazy
- Execute commands that should not work like 'dsbksdgbksdghsd' and check if the shell doesn't crash and prints an error
	=> sgasfgdfagdfsgdf
		=> echo $?
	=> ''
		=> echo $?
	=> /bin
		=> echo $?
- Try to execute a really really really long command with a ton of arguments
	=> md5 -s "hTzuQjO5nukvAv78UnENqHCrlggPHF1ix6iYP13FnWL7BHYIEE69ijnAOyVtMnZAFsyRAUf82mqv7f5BD093KC9XU7zUgxqpi7iMLCA51xJlIAxBogz08sE5BXfgESESZwz07glKvArFdy4th5qRkabk3AxgRFIW2LVOQ3FDPTfiXNmBtD0cbmR1MsPq9kgDCSeXRfIbXxm3lXima1p2kzTw7d83aqca6ZhYR7PZp1U5mGwg3tiqvmfPVubBZTISJdkmB6hANFNYvQUtwmwmye8NwuY5J4lHOz9DSdROsBbcjvwiFrbcTpfhnSpNzVNxOQKUT1XAtkreykzBwqjvmHMmpJM1wncGFt9CIDTrlwM3WCVUdxv6aRbbXuVG4otu06h0wuUT9gDsHI3S9ioaBXFw4OIsursotN1KnVHGX7ow6e29erqLC9wvCP6sXXVXJlgL4kL72QMojKXFQkqE8bzK862PhZh3CqZCth1H6cwCm2RA6jX0cvSkekhe7shPLvqUOEVCRQWcmfaXJZBIN7W16pyNERscxayj1WNX2"
	=> 한번에 1024 (stdin 버퍼 크기) byte까지만 입력 가능하다. 이 설정도 ioctl 시스템 콜로 구현해야 하는데 사용 불가능한 함수임.
- Have fun with that beautiful minishell and enjoy it
	=> 로그인 헤더 및 현재 경로 표기